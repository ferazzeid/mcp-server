/**
 * Inline Components Builder
 * Reads the compiled JS/CSS from components/dist and creates inline HTML templates
 */

const fs = require('fs');
const path = require('path');

const DIST_DIR = path.join(__dirname, 'components', 'dist');
const OUTPUT_FILE = path.join(__dirname, 'src', 'components-inlined.ts');

// Read files
const stylesCss = fs.readFileSync(path.join(DIST_DIR, 'style.css'), 'utf-8');
const stylesJs = fs.readFileSync(path.join(DIST_DIR, 'styles-Dzh90FEh.js'), 'utf-8');

// Component mappings
const components = [
  {
    name: 'FastingProgress',
    jsFile: 'fasting-progress.js',
    uri: 'ui://widget/fasting-progress.html',
    title: 'Fasting Progress Timer',
    description: 'Interactive fasting timer with live countdown, progress ring, elapsed time, and goal tracking',
    tools: ['get_current_fast', 'get_fasting_stats']
  },
  {
    name: 'FoodLog',
    jsFile: 'food-log.js',
    uri: 'ui://widget/food-log.html',
    title: 'Daily Food Log',
    description: 'Daily food entries with calories, macros, and meal tracking',
    tools: ['get_todays_food']
  },
  {
    name: 'WeightProgress',
    jsFile: 'weight-progress.js',
    uri: 'ui://widget/weight-progress.html',
    title: 'Weight Progress Tracker',
    description: 'Weight loss progress visualization with line chart, BMI display, and progress statistics',
    tools: ['get_weight_progress', 'get_current_weight', 'get_target_weight']
  }
];

// Generate inlined HTML for each component
const inlinedComponents = components.map(comp => {
  const componentJs = fs.readFileSync(path.join(DIST_DIR, comp.jsFile), 'utf-8');
  
  // Create inline HTML with embedded JS and CSS
  const html = `<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>${stylesCss}</style>
</head>
<body>
  <div id="fastnow-root"></div>
  <script type="module">
// Shared styles module
${stylesJs}

// Component code
${componentJs}
  </script>
</body>
</html>`;

  return {
    uri: comp.uri,
    name: comp.title,
    description: comp.description,
    htmlContent: html,
    linkedTools: comp.tools
  };
});

// Generate TypeScript file
const tsContent = `/**
 * GENERATED FILE - DO NOT EDIT
 * Generated by inline-components.js
 * Run: node inline-components.js
 */

export interface InlinedComponent {
  uri: string;
  name: string;
  description: string;
  htmlContent: string;
  linkedTools: string[];
}

export const INLINED_COMPONENTS: InlinedComponent[] = ${JSON.stringify(inlinedComponents, null, 2)};

export function getComponentByUri(uri: string): InlinedComponent | undefined {
  return INLINED_COMPONENTS.find(c => c.uri === uri);
}

export function getComponentByTool(toolName: string): InlinedComponent | undefined {
  return INLINED_COMPONENTS.find(c => c.linkedTools.includes(toolName));
}
`;

fs.writeFileSync(OUTPUT_FILE, tsContent);

console.log('‚úÖ Inlined components generated:');
inlinedComponents.forEach(c => {
  const sizeKb = (c.htmlContent.length / 1024).toFixed(2);
  console.log(`   - ${c.name}: ${sizeKb} KB`);
});
console.log(`\nüìù Output: ${OUTPUT_FILE}`);

